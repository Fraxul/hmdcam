import os
import platform
import sys
Import('env')

# Building on Tegra; build hmdcam application
tegraEnv = env.Clone()

# Import locally built Monado static libraries
MONADO_BASE='#monado'
MONADO_BUILD='#build/monado'

if not os.path.exists(str(Dir(MONADO_BUILD))):
  sys.exit('Monado build artifacts are not present. Please run ./build-monado.sh first.')

tegraEnv.Append(
  CPPDEFINES=['IMGUI_DISABLE_OBSOLETE_KEYIO', 'IMGUI_DISABLE_OBSOLETE_FUNCTIONS'],
  CPPPATH=[
    'hmdcam',
    'wayland',
    MONADO_BUILD + '/src/xrt/include', # Contains generated config headers
    MONADO_BASE + '/src/xrt/include',
    MONADO_BASE + '/src/xrt/auxiliary',
    '/usr/include/drm',
  ],
  LIBS=[
    'z',
    'dl',
    'pthread', 'rt',
    'boost_chrono', 'boost_system', 'boost_thread',
    'epoxy',
    'drm',
    'wayland-client', 'wayland-egl', 'xkbcommon',
    'hidapi-libusb', 'usb-1.0', 'udev',
    'cuda', 'cudart',
    'nppc', 'nppidei', 'nppitc',
    'opencv_core', 'opencv_imgproc', 'opencv_imgcodecs', 'opencv_calib3d', 'opencv_aruco',
    'ibverbs', 'rdmacm',
    'nvToolsExt',
  ]
)
monadoStatics = \
    Glob(MONADO_BUILD + '/src/xrt/targets/common/*.a') + \
    Glob(MONADO_BUILD + '/src/xrt/state_trackers/prober/*.a') + \
    Glob(MONADO_BUILD + '/src/xrt/drivers/*.a') + \
    Glob(MONADO_BUILD + '/src/xrt/state_trackers/oxr/*.a') + \
    [
      MONADO_BUILD + '/src/xrt/auxiliary/os/libaux_os.a',
      MONADO_BUILD + '/src/xrt/auxiliary/util/libaux_util.a',
      MONADO_BUILD + '/src/xrt/auxiliary/util/libaux_util_sink.a',
      MONADO_BUILD + '/src/xrt/auxiliary/vive/libaux_vive.a',
      MONADO_BUILD + '/src/xrt/auxiliary/tracking/libaux_tracking.a', # Needs to be after libaux_vive.a
      MONADO_BUILD + '/src/xrt/auxiliary/math/libaux_math.a', # Needs to be after libaux_tracking.a for symbol resolution.
      MONADO_BUILD + '/src/xrt/auxiliary/bindings/libaux_generated_bindings.a' # Needs to be after libaux_util.a
    ]

if tegraEnv['IS_TEGRA']:
  # Building natively on Tegra enables Argus camera library and nvenc support
  # Pull in nvargus, nvbuf, v4l2, and live555
  tegraEnv.Append(
    CPPPATH=[
      '#hmdcam/tegra',
      '#live555/include',
      tegraEnv['TEGRA_MMAPI'],
      tegraEnv['TEGRA_MMAPI'] + '/include',
      tegraEnv['TEGRA_MMAPI'] + '/argus/include',
      '#tegra_mmapi',
    ],
    LIBS=[
      'nvargus',
      'nvbufsurface', 'nvbufsurftransform',
      'v4l2'
    ],
    CPPDEFINES=[
      'USE_LIBARGUS',
      'USE_RDMA',
      'NO_OPENSSL', # live555 config directive
    ]
  )

  if (tegraEnv['TEGRA_RELEASE'] < 35):
    tegraEnv.Append(LIBS=['nvbuf_utils'], CPPDEFINES=['USE_NVBUF_UTILS'])

  tegra_src = Glob('hmdcam/tegra/*.cpp')

else:
  tegra_src = []
  # WSL2 CUDA doesn't expose cuGraphicsResourceGetMappedEglFrame, which is required by the RDMA server code.
  # Only enable the RDMA server if we're not building inside a WSL2 environment.
  if (platform.platform().find('WSL2') < 0):
    tegraEnv.Append(CPPDEFINES=['USE_RDMA'])


if (tegraEnv['IS_TEGRA'] and not tegraEnv['nsight']):
  tegraEnv.Append(
    CPPDEFINES=['USE_NVENC'],
    CPPPATH=['#hmdcam/tegra/nvenc']
  )
  liveMediaStatics = [
    '#live555/libliveMedia.a',
    '#live555/libgroupsock.a',
    '#live555/libBasicUsageEnvironment.a',
    '#live555/libUsageEnvironment.a']

  # Pull in a few classes from tegra_mmapi
  tegra_mmapi_class_src_base = tegraEnv['TEGRA_MMAPI'] + '/samples/common/classes'
  VariantDir('tegra_mmapi', tegra_mmapi_class_src_base, duplicate=False)
  tegra_mmapi_src = [
    'tegra_mmapi/NvBuffer.cpp',
    'tegra_mmapi/NvElement.cpp',
    'tegra_mmapi/NvElementProfiler.cpp',
    'tegra_mmapi/NvLogging.cpp',
    'tegra_mmapi/NvUtils.cpp',
    'tegra_mmapi/NvV4l2Element.cpp',
    'tegra_mmapi/NvV4l2ElementPlane.cpp',
    'tegra_mmapi/NvVideoDecoder.cpp',
    'tegra_mmapi/NvVideoEncoder.cpp'
  ]
  tegra_src += Glob('hmdcam/tegra/nvenc/*.cpp')

else:
  # building on desktop for testing or in NSight compatibility mode; NVEnc bits will be stubbed out
  liveMediaStatics = []
  tegra_mmapi_src = []

if (env['HAVE_VPI2']):
  tegraEnv.Append(LIBS=['nvvpi'])
if (env['HAVE_OPENCV_CUDA']):
  tegraEnv.Append(LIBS=['opencv_cudafilters', 'opencv_cudaimgproc', 'opencv_cudawarping'])

tegraEnv.CompilationDatabase()
tegraEnv.Program(
  target = '../bin/hmdcam', # relative to build/hmdcam
  source = Glob('hmdcam/*.cpp')
    + Glob('hmdcam/*.c')
    + Glob('hmdcam/*.cu')
    + Glob('common/*.cpp')
    + Glob('common/*.cu')
    + Glob('rdma/*.cpp')
    + Glob('rhi/*.cpp')
    + Glob('rhi/cuda/*.cpp')
    + Glob('rhi/gl/*.cpp')
    + Glob('rhi/egl/*.cpp')
    + Glob('imgui/*.cpp')
    + Glob('implot/*.cpp')
    + Glob('wayland/*.c')
    + tegra_src
    + tegra_mmapi_src
    + liveMediaStatics
    + monadoStatics,
)

