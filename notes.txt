=========================== New machine setup ================================

Install the Jetson Multimedia API and other required libraries (CUDA for Tegra):
  Jetpack 5.0 or newer:
    sudo apt install nvidia-l4t-jetson-multimedia-api nvidia-cuda
  Older Jetpack versions (4.x series):
    Make sure that the Nvidia SDK manager finishes its post-flash SDK install, or required libraries will be missing.
    If the Jetson Multimedia API is not installed (nothing in /usr/src/jetson_multimedia_api or /usr/src/tegra_multimedia_api):
      Unpack Tegra_Multimedia_API_R32.2.3_aarch64.tbz2 (or a newer version, from NV developer downloads) to /usr/src


Don't forget to set up the submodules after cloning:
  git submodule update --init --recursive

Install prerequisite packages:
  sudo apt install scons libhidapi-dev libhidapi-hidraw0 libboost-all-dev libudev-dev clang lldb ninja-build libusb-1.0-0-dev libepoxy-dev libeigen3-dev libsdl2-dev librdmacm-dev

If you're on Ubuntu >= 20.04 or L4T >= r34.1 (JetPack >= 5.0), install the packaged cmake:
  sudo apt install cmake
Otherwise, use pip3 to get a new enough cmake for the DepthAI build -- 3.10.2 as shipped in 18.04 is too old:
  sudo apt remove cmake*
  sudo apt install python3-pip
  sudo -H pip3 install --upgrade pip
  sudo -H pip3 install cmake

Build the embedded Monado library required for distortion processing
  ./build-monado.sh

Optional: If you want to build the DepthAI backend, run the included script to build required libraries first:
  ./build-depthai-core.sh

Finally, build the project:
  scons


Before the first run, set up udev rules to make the HMD usb-hid devices accessible:
  sudo cp config-examples/83-hmd.rules /etc/udev/rules.d
  sudo udevadm control --reload



==============================================================================


Make sure that the user you're running as is members of the "plugdev" and "input" groups.
plugdev is required to open the Vive's /dev/hidraw* node
input is required to open nodes under /dev/input for the USB-HID remote control

To avoid accidentally powering off the Jetson with the USB-HID remote, disable systemd's response to power/suspend/hibernate/whatever keys:
edit /etc/systemd/logind.conf :

[Login]
HandlePowerKey=ignore
HandleSuspendKey=ignore
HandleHibernateKey=ignore
HandleLidSwitch=ignore
HandleLidSwitchDocked=ignore

then sudo systemctl restart systemd-logind #(NOTE: this will kill your login session!)

Disabling the desktop environment:
sudo systemctl isolate multi-user.target            # takes effect immediately
sudo systemctl set-default multi-user.target        # to persist across reboots

Reenabling the desktop environment
sudo systemctl isolate graphical.target             # takes effect immediately
sudo systemctl set-default graphical.target         # to persist across reboots



Camera ISP settings are stored at /var/nvidia/nvcam/settings/camera_overrides.isp
The vendor ISP settings may be adjusted to improve flicker correction. These settings have been found to work well for capturing at 90fps and correcting for 60hz flicker:
flicker.ConfidenceThreshold = 32;
flicker.SuccessFrameCount = 8;
flicker.FailureFrameCount = 3;
flicker.CorrectionFreqListEntries = 4;
flicker.CorrectionFreqList = {60, 90, 100, 120};

The default Sharpening filter should be disabled to improve accuracy of Charuco target detection:
sharpness.v5.enable = FALSE;



====== Nvidia Visual Profiler (nvvp) (on desktop) =====
CUDA 11.1 + Ubuntu 20.04 nvvp will fail to launch out-of-the-box with a Java error.
solution: nvvp needs to run under the java 8 runtime (and as root, typically)

  sudo apt install openjdk8-jre
  sudo update-alternatives --config java
  select OpenJDK 8

nvvp can then be run with sudo /usr/local/cuda/bin/nvvp

Sample invocation to generate an nvprof tracefile:

(as root, on device)
  nvprof --system-profiling on --timeout 15 --cpu-profiling on --export-profile /tmp/dgpu-worker.nvvp /home/dweatherford/hmdcam/build/bin/dgpu-worker

Sample invocation for profiling hmdcam + dgpu-worker together. Requires CWD to be correct so hmdcam can load shaders.
(as root, on device)
  cd /home/dweatherford/hmdcam
  nvprof --profile-child-processes --system-profiling on --timeout 15 --cpu-profiling on --export-profile /tmp/hmdcam-%p.nvvp /home/dweatherford/hmdcam/build/bin/hmdcam


Copy /tmp/dgpu-worker.nvvp back to the host and load it into nvvp.


